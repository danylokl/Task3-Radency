import { EventEmitter, Injectable, Output } from '@angular/core';
import { BehaviorSubject, Observable, of, Subject } from 'rxjs';
import { Book } from './book.model';
import { Review } from './review.model';
@Injectable()
export class BookService {
  private text =
    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam fermentum ut felis nec dapibus. Pellentesque condimentum massa ac mauris egestas pharetra. Pellentesque tristique euismod molestie. Sed feugiat nunc ultrices mauris posuere, eget aliquam nibh elementum. Donec vitae leo neque. Maecenas nec venenatis enim. Sed condimentum ultrices turpis, in suscipit massa ornare sit amet. Integer cursus vestibulum odio sit amet tempus. Vestibulum venenatis malesuada justo, ut efficitur ex condimentum aliquam. Phasellus luctus iaculis ante. Ut nisi augue, gravida eget nisl a, laoreet molestie nisl. Praesent euismod ligula ut tortor convallis, interdum ultricies urna euismod. Pellentesque scelerisque tortor est, at suscipit justo egestas vel.';
  private image =
    '';
  private books: Book[] = [
    new Book('title1', this.image, 'horror', 'author1', this.text, [
      new Review('review1', 5, this.text),
    ]),
    new Book('title2', this.image, 'sci-fi', 'author2', 'some good content', [
      new Review('review2', 2, 'message'),
    ]),
    new Book('title3', this.image, 'horror', 'author3', 'bad content', [
      new Review('review3', 3, 'message'),
    ]),
  ];
  private bok = new BehaviorSubject<Book[]>(this.books);
  public bok$ = this.bok.asObservable();
  public books$ = new Subject();
  changebok(Book: Book[]) {
    this.bok.next(Book);
  }

  getBooks(): Observable<Book[]> {
    const books = of(this.books);
    return books;
  }
  addBook(book: Book): Observable<Book> {
    this.books.push(book);

    return of(book);
  }
}
